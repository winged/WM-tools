#!/usr/bin/python

# Copyright: 2011 David Vogt <dv@winged.ch>
# License:   BSD 3-Clause

from subprocess import PIPE, Popen
import os
import re
import sys

class Window:
	def __init__(self, id, desktop, title):
		self.id      = id
		self.desktop = desktop
		self.title   = self.makeTitle(title)
		#self.title   = title

	def makeTitle(self, title):
		"""Add a number to the window's title if there's already an equally named window"""

		if title in Window.count: Window.count[title] += 1
		else:                     Window.count[title]  = 1

		if Window.count[title] > 1:
			title = title + " (%d)" % Window.count[title]

		return title

	def __repr__(self):
		return "Window(id=%s, desktop=%d, title=%s)" % (self.id, self.desktop, self.title)

	@staticmethod
	def getList():
		Window.count = dict()
		windows = os.popen('wmctrl -l').read().split("\n")
		windows = [x for x in windows if x[:2] == '0x']

		def parsewin(w):
			parts = list(re.split('\s+', w, 3))
			return Window(
				parts[0],
				int(parts[1]) + 1,
				parts[3]
			)
		return [parsewin(x) for x in windows]


class WMU(object):

	def getWindowByTitle(self, title):
		""" First window by given title"""
		print("looking for ====%s====" % title)
		print([x.title for x in Window.getList()])
		matches = [x for x in Window.getList() if x.title == title]

		return matches[0] if len(matches) > 0 else None

	def formatWin(self, window):
		return '%s [%d]' % (window.title, window.desktop)

	def unformatWin(self, title):
		"""Strip off desktop identifier at the end"""
		return re.sub('\s\[\d+\]$', '', title)

	def selectWindow(self, prompt):
		dmenu = Popen(['dmenu', '-l', '20', '-f', '-i', '-p', prompt], stdin=PIPE, stdout=PIPE, stderr=PIPE);

		dmenu_input = "\n".join([self.formatWin(w) for w in Window.getList()])

		(out, err) = dmenu.communicate(bytes(dmenu_input, 'UTF-8'))
		selected = out.decode("UTF-8")
		dmenu.wait()

		title = self.unformatWin(selected.strip())

		window = self.getWindowByTitle(title)
		if window == None:
			print("No window named '%s'" % title)
			exit()

		return window

	def usage(self):
		return """Usage:
			wmu fetch  -- fetch selected window to current desktop, and activate it
			wmu go     -- go to selected window. Switch desktop if needed
		"""

	def fetch(self):
		window = self.selectWindow('fetch win:')
		print("Fetching window %s" % window)
		os.system('wmctrl -i -R %s' % window.id)
		exit()

	def goto(self):
		window = self.selectWindow('goto win:')
		print("Going to window %s" % window)
		os.system('wmctrl -i -a %s' % window.id)
		exit()

	def doAction(self, action):
		if   (action == 'go'   ): return self.goto()
		elif (action == 'fetch'): return self.fetch()
		return self.usage();

wmu = WMU()

if(len(sys.argv) <= 1):
	print(wmu.usage())
	exit()

wmu.doAction(sys.argv[1])

